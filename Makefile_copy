# Makefile
# 디렉토리 설정
ROOT_DIR := $(shell pwd)
SRC_DIR := src
OBJ_DIR := obj
BIN_DIR := bin

# 타겟 설정
PIPELINE_TARGET := $(BIN_DIR)/pipeline_model
ORIGINAL_TARGET := $(BIN_DIR)/original_model

# 컴파일러 및 플래그 설정
CXX := g++
CXXFLAGS := -std=c++17 -O3

# OpenGL 및 EGL, GLES 추가
LDFLAGS := -Wl,--rpath=/usr/lib \
-ltensorflowlite -ltensorflowlite_gpu_delegate -lEGL -lGLESv2 \
-lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lpthread

# 파일 설정
INCS := -Iinc \
		-I/usr/include \
		-I/usr/include/opencv4 \
        -I$(SRC_DIR)

LIBS := -L/usr/lib -L/root/ghpark/LiteRT_LLM_inference_app/external/tensorflow/bazel-bin/tensorflow/lite/delegates/gpu

# 소스 및 헤더 파일
PIPELINE_SRC := $(SRC_DIR)/pipeline_model.cpp
ORIGINAL_SRC := $(SRC_DIR)/original_model.cpp
HEADER_FILES := $(SRC_DIR)/model_utils.h

# 오브젝트 파일
PIPELINE_OBJ := $(OBJ_DIR)/pipeline_model/pipeline_model.o
ORIGINAL_OBJ := $(OBJ_DIR)/original_model/original_model.o

# 의존성 파일
DEPS := $(PIPELINE_OBJ:.o=.d) $(ORIGINAL_OBJ:.o=.d)

.PHONY: all clean

# 기본 타겟
all: directories $(PIPELINE_TARGET) $(ORIGINAL_TARGET)
	@echo "Build completed successfully"

# 디렉토리 생성
directories:
	@mkdir -p $(OBJ_DIR)/pipeline_model
	@mkdir -p $(OBJ_DIR)/original_model
	@mkdir -p $(BIN_DIR)

# 파이프라인 모델 오브젝트 파일 생성 규칙
$(PIPELINE_OBJ): $(PIPELINE_SRC) $(HEADER_FILES)
	$(CXX) $(CXXFLAGS) $(INCS) $(LIBS) -c $< -o $@ -MD $(LDFLAGS)

# 오리지널 모델 오브젝트 파일 생성 규칙
$(ORIGINAL_OBJ): $(ORIGINAL_SRC) $(HEADER_FILES)
	$(CXX) $(CXXFLAGS) $(INCS) $(LIBS) -c $< -o $@ -MD $(LDFLAGS)

# 파이프라인 실행 파일 생성 규칙
$(PIPELINE_TARGET): $(PIPELINE_OBJ)
	$(CXX) $(CXXFLAGS) $(INCS) $(LIBS) $< -o $@ $(LDFLAGS)

# 오리지널 실행 파일 생성 규칙
$(ORIGINAL_TARGET): $(ORIGINAL_OBJ)
	$(CXX) $(CXXFLAGS) $(INCS) $(LIBS) $< -o $@ $(LDFLAGS)

# 정리 규칙
clean:
	rm -rf $(OBJ_DIR)
	rm -rf $(BIN_DIR)

# 의존성 파일 포함
-include $(DEPS)